#!/usr/bin/env bash

set -e # exit on first error
set -u # Treat unset variables as error

# Required empty directory not created by git
if test ! -d config
then
  mkdir -p config
fi

if test X"`uname -s`" = X"Darwin"
then
  if test X != X"`which glibtoolize`" -a -e `which glibtoolize`
  then
    libtoolize="glibtoolize"
  else
    libtoolize="libtoolize"
  fi
else
  libtoolize="libtoolize"
fi

# Determine location of fortran-build-infrastructure

if test $# -eq 1
then
  export BUILD_TOOLS="$1"
  if ! test -e "${BUILD_TOOLS}/aclocal/sparskit.m4"
  then
    echo
    echo "No build-tools directory was found at $1"
    echo
    echo "Failure" && exit 1
  fi
else
  root=`dirname $0`
  root=`(cd ${root}; pwd)`
  if test -e "${root}/build-tools/aclocal/sparskit.m4"
  then
    echo "Configuring build-tools as a subpackage"
    export BUILD_TOOLS="${root}/build-tools"
    if test -e build-tools/bootstrap
    then
      (cd build-tools && ./bootstrap) || (echo "Failure" && exit 1)
    fi
  else
    echo
    echo 'No build-tools directory was found.'
    echo 'Possibly you need to run:'
    echo '`git submodule update --init --recursive -- build-tools`'
    echo 'to populate locally as a submodule.'
    echo
    echo "Failure" && exit 1
  fi
fi

aclocal_flags="${ACLOCAL_FLAGS:-}"

echo "bootstrapping `basename $PWD`..."

aclocal --force -I ${BUILD_TOOLS}/aclocal ${aclocal_flags} \
&& $libtoolize --force --copy \
&& autoheader --force \
&& automake --gnu --add-missing --copy \
&& autoconf --force \
|| (echo "Failure" && exit 1)

for i in pancake parfait MessagePasser tracer t-infinity
do
  if test -e $i/bootstrap
  then
    echo "bootstrapping ${i}..."
    ( cd $i && ./bootstrap $BUILD_TOOLS ) || (echo "Failure" && exit 1)
  fi
done

echo "Success"
