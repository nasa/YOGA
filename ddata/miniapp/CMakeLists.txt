cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

function(add_ddata_miniapp ddata_class)
    set(miniapp ${ddata_class}_miniapp)
    set(miniapp_definition USE_${ddata_class})
    string(TOUPPER ${ddata_class} ddata_class)
    add_executable(${miniapp} main.cpp)
    target_compile_definitions(${miniapp} PRIVATE USE_${ddata_class})
    if (CMAKE_BUILD_TYPE MATCHES asan)
        target_compile_definitions(${miniapp} PRIVATE PROBLEM_SIZE=1)
    else()
        target_compile_definitions(${miniapp} PRIVATE PROBLEM_SIZE=1e6)
    endif()
    target_link_libraries(${miniapp} PRIVATE ddata::ddata)
    set_standard_ring_rpath(${miniapp})
    add_test(NAME ${miniapp} COMMAND ${miniapp})
endfunction()

add_ddata_miniapp(etd)
add_ddata_miniapp(dtd)

find_package(Kokkos-simd QUIET)
if (Kokkos-simd_FOUND)
    message("building Kokkos SIMD miniapps")
    add_ddata_miniapp(vtd)
    add_ddata_miniapp(etdv)
    target_link_libraries(vtd_miniapp PRIVATE Kokkos::simd)
    target_link_libraries(etdv_miniapp PRIVATE Kokkos::simd)
endif()

option(BUILD_DDATA_SACADO_MINIAPP "build ddata miniapp with Sacado" OFF)

if (BUILD_DDATA_SACADO_MINIAPP)
    find_package(MPI REQUIRED)
    find_package(Trilinos REQUIRED)
    if (NOT TARGET SacadoWrapper)
        add_library(SacadoWrapper INTERFACE)
        add_library(ddata::SacadoWrapper ALIAS SacadoWrapper)
        target_include_directories(SacadoWrapper INTERFACE ${Trilinos_INCLUDE_DIRS})

        set(ddata_trilinos_flags ${Trilinos_CXX_COMPILER_FLAGS})
        separate_arguments(ddata_trilinos_flags)
        target_compile_options(SacadoWrapper INTERFACE ${sacado_trilinos_flags})

        # This is bit of a hack to get all the Kokkos flags propogated correctly for various types of backends (OpenMP, CUDA, etc.)
        target_link_libraries(SacadoWrapper INTERFACE Kokkos::kokkos)

        foreach (tlib ${Trilinos_LIBRARIES})
            find_library(ddata_trilinos_${tlib} ${tlib} PATHS ${Trilinos_LIBRARY_DIRS} NO_DEFAULT_PATH REQUIRED)
            target_link_libraries(SacadoWrapper INTERFACE ${ddata_trilinos_${tlib}})
        endforeach ()
    endif ()
    add_executable(sacado_miniapp main.cpp)
    target_compile_definitions(sacado_miniapp PRIVATE USE_SACADO)
    target_include_directories(sacado_miniapp PRIVATE ${MPI_INCLUDE_PATH})
    target_link_libraries(sacado_miniapp PRIVATE ${MPI_LIBRARIES} ddata::SacadoWrapper)
endif ()

if (BUILD_DDATA_SURREAL_MINIAPP)
    find_package(Surreal REQUIRED)
    add_executable(test_euler_flux_1d_surreal test_euler_flux_1d_surreal_test.cpp)
    target_include_directories(test_euler_flux_1d_surreal PRIVATE ${Surreal_INCLUDE_DIR})
endif()
